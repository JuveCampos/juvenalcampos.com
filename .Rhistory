ptos_linea[distancias == distancia_minima,]
# Linea de distancia mínima
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>% st_coordinates()), ncol = 2, byrow = TRUE))
library(leaflet)
# Hacemos el mapa
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# Función para calcular las distancias.
distancia <- function(X, Y){
pto <- data.frame(x = X, y = Y) %>%
st_as_sf(coords = c("x", "y"))
st_crs(pto) <- st_crs(f)
st_distance(pto, f)
}
# Distancia a un punto del mpio de Mexicali, BC
distancia(X = -115.418556, Y = 31.795112)
# Distancia a Puerto Peñasco, Sonora
distancia(X = -113.534104, Y = 31.309766)
# Distancia al CIDE
distancia(X = -99.263426, Y = 19.374515)
# Distancias a todos estos puntos
distancia(X = c(-115.418556,-113.534104, -99.263426),
Y = c(31.795112, 31.309766, 19.374515))
# Funcion para dibujar las lineas de minima distancia
# Nota, esta función da por hecho que previamente ya cargamos
# la base de datos de la frontera y la almacenamos en el objeto f
dibuja_lineas_minima_distancia <- function(X,Y){
# Creamos el punto a partir de los argumentos X y Y
pto <- data.frame(x = X, y = Y) %>%
st_as_sf(coords = c("x", "y"))
# Homologamos el Sistema de Coordenadas de Referencia
st_crs(pto) <- st_crs(f)
# Extraemos los vértices de la linea
ptos_linea <- st_coordinates(f) %>%
as.data.frame() %>%
st_as_sf(coords = c("X", "Y"))
# Homologamos el Sistema de Coordenadas de Referencia
st_crs(ptos_linea) <- st_crs(f)
# Sacamos las distancias del punto a todos los vertices de la frontera
distancias <- st_distance(ptos_linea, pto)
# Obtencion de la distancia minima
distancia_minima <- min(distancias)
# Guardamos el punto de la frontera con la distancia minima
punto_frontera <<-
ptos_linea[distancias == distancia_minima,]
# Construimos la linea de distancia minima
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>%       st_coordinates()), ncol = 2, byrow = TRUE))
# Seleccionamos la linea como objeto a retornar de la funcion
return(linea)
}
# Probamos la funcion, sacando la linea del CIDE a la frontera
lineaCIDE <- dibuja_lineas_minima_distancia(X = -99.263426, Y = 19.374515)
# Dibujamos el mapa
leaflet(lineaCIDE) %>%
addTiles() %>%
addPolylines(color = "#005700")
# 2. Hechar a andar la pagina
blogdown::serve_site()
# 2. Hechar a andar la pagina
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
# 2. Hechar a andar la pagina
blogdown::serve_site()
blogdown:::new_post_addin()
# Librerías ----
library(tidyverse)
library(sf)
library(leaflet)
# Datos ----
url_shape <- "https://github.com/JuveCampos/colaboracionesConAmi/raw/master/01_Datos/Shapes/mpios.geojson"
# Leemos el shape
bd <- st_read(url_shape,
quiet = T)
# Datos ----
url_shape <- "https://raw.githubusercontent.com/JuveCampos/juveBlog/master/cortando%20Islas/mpios.geojson"
# Leemos el shape
bd <- st_read(url_shape,
quiet = T)
# Filtramos Colima
colima <- bd %>% filter(NOM_ENT == "Colima")
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
# 2. Hechar a andar la pagina
blogdown::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
# 2. Hechar a andar la pagina
blogdown::serve_site()
# 2. Hechar a andar la pagina
blogdown::serve_site()
# 2. Hechar a andar la pagina
blogdown::serve_site()
?sf::st_intersection
?st_write
?sf::st_write
# 2. Hechar a andar la pagina
blogdown::serve_site()
install.packages("blogdown")
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
![](/post/2020-12-04-pivoteando-bases_files/sandwich.png){width=90%}
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
# Librerias ----
library(tabulizer) # Para leer tablas en pdf
install.packages("rJava")
# Librerias ----
library(tabulizer) # Para leer tablas en pdf
# Librerias ----
library(tabulizer) # Para leer tablas en pdf
# Librerias ----
library(tabulizer) # Para leer tablas en pdf
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
# Librerias ----
library(tabulizer) # Para leer tablas en pdf
library(tidyverse) # Para manipular datos
# Obtenemos la url del Plan del INFONAVIT
url <- "https://portalmx.infonavit.org.mx/wps/wcm/connect/67e528e7-f13d-4dbf-a668-b29a594351c3/Plan_Estrategico_y_Financiero_2020-2024.pdf?MOD=AJPERES&CVID=mYkHiU3"
# Librerias ----
library(tabulizer) # Para leer tablas en pdf
library(tidyverse) # Para manipular datos
# Obtenemos la url del Plan del INFONAVIT
url <- "https://portalmx.infonavit.org.mx/wps/wcm/connect/67e528e7-f13d-4dbf-a668-b29a594351c3/Plan_Estrategico_y_Financiero_2020-2024.pdf?MOD=AJPERES&CVID=mYkHiU3"
# Extraemos la tabla de la página 116
tab <- extract_tables(url, pages = 116)
# Obtenemos la url del Plan del INFONAVIT
url <- "/home/juvenal/Descargas/Plan_Estrategico_y_Financiero_2020-2024.pdf"
# Extraemos la tabla de la página 116
tab <- extract_tables(url, pages = 116)
tab
# Obtenemos la url del Plan del INFONAVIT
url <- "/home/juvenal/Descargas/Plan_Estrategico_y_Financiero_2020-2024.pdf"
tab <- extract_tables(url, pages = 116)
# Obtenemos la url del Plan del INFONAVIT
url <- "/home/juvenal/Descargas/Plan_Estrategico_y_Financiero_2020-2024.pdf"
tab <- extract_tables(url, pages = 116)
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>% # Quitamos el renglón de los nombres
separate(V6,
into = c("V6", "V7", "V8", "V9"),
sep = "\\s+") # La ultima columna, con los datos pegados, la separamos en cuatro
tab <- extract_tables(url)
tab <- extract_tables(url, pages = 113)
tab
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>% # Quitamos el renglón de los nombres
separate(V6,
into = c("V6", "V7", "V8", "V9"),
sep = "\\s+") # La ultima columna, con los datos pegados, la separamos en cuatro
matriz
# Le metemos los nombres personalizados (que signifiquen algo para nosotros)
names(matriz) <- c("Entidad",
"Nueva",
"Existente",
"No Hipotecarios",
"Total",
"Derrama Infonavit",
"Derrama Entidades Financieras",
"Derrama No-hipotecarios",
"Derrama Total")
# Convertimos las columnas a numero
matriz[,2:9] <- lapply(matriz[,2:9], function(x){
x %>%
str_remove_all(pattern = ",") %>% # Le quitamos las comas
as.numeric() # Lo convertimos a numero
})
View(matriz)
# Generamos la base de datos a graficar
bd_plot <- matriz %>%
select(Entidad,Nueva) %>%
filter(Entidad != "Nacional") %>%
mutate(Pctje = 100*Nueva/sum(Nueva)) %>%
arrange(-Pctje)
# Hacemos la gráfica
bd_plot %>%
ggplot(aes(x = reorder(Entidad, Pctje), y = Pctje)) +
geom_col(fill = "orange") +
coord_flip() +
geom_label(aes(label = paste0(round(Pctje,1), "%")),
hjust = -0.05) +
scale_y_continuous(expand = expansion(c(0,0.3), 0)) +
labs(y = "", x = "",
title = "Porcentaje del total de Créditos para adquisición de vivienda nueva\npor Entidad Federativa, 2021",
caption = "Fuente: Plan Estratégico y Financiero 2021-2025. INFONAVIT. ") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_blank())
# # Obtenemos la url del Plan del INFONAVIT
# url <- "/home/juvenal/Descargas/Plan_Estrategico_y_Financiero_2020-2024.pdf"
url <- "https://portalmx.infonavit.org.mx/wps/wcm/connect/67e528e7-f13d-4dbf-a668-b29a594351c3/Plan_Estrategico_y_Financiero_2020-2024.pdf?MOD=AJPERES&CVID=mYkHiU3"
# Extraemos la tabla de la página 116
tab <- extract_tables(url, pages = 113)
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>% # Quitamos el renglón de los nombres
separate(V6,
into = c("V6", "V7", "V8", "V9"),
sep = "\\s+") # La ultima columna, con los datos pegados, la separamos en cuatro
# Le metemos los nombres personalizados (que signifiquen algo para nosotros)
names(matriz) <- c("Entidad",
"Nueva",
"Existente",
"No Hipotecarios",
"Total",
"Derrama Infonavit",
"Derrama Entidades Financieras",
"Derrama No-hipotecarios",
"Derrama Total")
# Convertimos las columnas a numero
matriz[,2:9] <- lapply(matriz[,2:9], function(x){
x %>%
str_remove_all(pattern = ",") %>% # Le quitamos las comas
as.numeric() # Lo convertimos a numero
})
# Generamos la base de datos a graficar
bd_plot <- matriz %>%
select(Entidad,Nueva) %>%
filter(Entidad != "Nacional") %>%
mutate(Pctje = 100*Nueva/sum(Nueva)) %>%
arrange(-Pctje)
# Hacemos la gráfica
bd_plot %>%
ggplot(aes(x = reorder(Entidad, Pctje), y = Pctje)) +
geom_col(fill = "orange") +
coord_flip() +
geom_label(aes(label = paste0(round(Pctje,1), "%")),
hjust = -0.05) +
scale_y_continuous(expand = expansion(c(0,0.3), 0)) +
labs(y = "", x = "",
title = "Porcentaje del total de Créditos para adquisición de vivienda nueva\npor Entidad Federativa, 2021",
caption = "Fuente: Plan Estratégico y Financiero 2021-2025. INFONAVIT. ") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_blank())
tab[[1]]
tab[[1]] %>% # Nos quedamos con la tabla
as.tibble()
tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "")
tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "")
tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1)
tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1)
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1)
View(matriz)
View(matriz)
tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>% # Quitamos el renglón de los nombres
separate(V6,
into = c("V6", "V7", "V8", "V9"),
sep = "\\s+")
View(tab)
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1)
View(matriz)
matriz
matriz
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>%
select(1:5)
matriz
# Le metemos los nombres personalizados (que signifiquen algo para nosotros)
names(matriz) <- c("Entidad",
"Nueva",
"Existente",
"No Hipotecarios",
"Total")
matriz
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
# slice(-1) %>% # quitamos el primer renglón
select(1:5) # Nos quedamos con los primeros 5 renglones
matriz
View(matriz)
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>% # quitamos el primer renglón
select(1:5) # Nos quedamos con los primeros 5 renglones
# Le metemos los nombres personalizados (que signifiquen algo para nosotros)
names(matriz) <- c("Entidad",
"Nueva",
"Existente",
"No Hipotecarios",
"Total")
# Convertimos las columnas a numero
matriz[,2:9] <- lapply(matriz[,2:9], function(x){
x %>%
str_remove_all(pattern = ",") %>% # Le quitamos las comas
as.numeric() # Lo convertimos a numero
})
tab
tab <- extract_tables(url, pages = 113)
tab[[1]]
url <- "/home/juvenal/Descargas/Plan_Estrategico_y_Financiero_2020-2024.pdf"
# Extraemos la tabla de la página 116
tab <- extract_tables(url, pages = 113)
tab
# Extraemos la tabla de la página 116
tab <- extract_tables(url, pages = 113)
tab[[1]]
# Le metemos los nombres personalizados (que signifiquen algo para nosotros)
names(matriz) <- c("Entidad",
"Nueva",
"Existente",
"No Hipotecarios",
"Total")
matriz
# Convertimos las columnas a numero
matriz[,2:5] <- lapply(matriz[,2:5], function(x){
x %>%
str_remove_all(pattern = ",") %>% # Le quitamos las comas
as.numeric() # Lo convertimos a numero
})
matriz
# Generamos la base de datos a graficar
bd_plot <- matriz %>%
select(Entidad,Nueva) %>%
filter(Entidad != "Nacional") %>%
mutate(Pctje = 100*Nueva/sum(Nueva)) %>%
arrange(-Pctje)
# Hacemos la gráfica
bd_plot %>%
ggplot(aes(x = reorder(Entidad, Pctje), y = Pctje)) +
geom_col(fill = "orange") +
coord_flip() +
geom_label(aes(label = paste0(round(Pctje,1), "%")),
hjust = -0.05) +
scale_y_continuous(expand = expansion(c(0,0.3), 0)) +
labs(y = "", x = "",
title = "Porcentaje del total de Créditos para adquisición de vivienda nueva\npor Entidad Federativa, 2021",
caption = "Fuente: Plan Estratégico y Financiero 2021-2025. INFONAVIT. ") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_blank())
?extract_tables
# Extraemos la tabla de la página 113
tab <- extract_tables(url, pages = 113, method = "lattice")
tab[[1]]
# Extraemos la tabla de la página 113
tab <- extract_tables(url, pages = 113, method = "stream")
tab[[1]]
tab[[1]]
tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1)
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1)
View(matriz)
View(matriz)
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>% # quitamos el primer renglón
separate(V6,
into = c("V6", "V7", "V8", "V9"))
View(matriz)
# Generamos la tabla:
matriz <- tab[[1]] %>% # Nos quedamos con la tabla
as.tibble() %>% # Convertimos a tibble
filter(V1 != "") %>% # Filtramos los renglones en blanco
slice(-1) %>% # quitamos el primer renglón
separate(V6,
into = c("V6", "V7", "V8", "V9"),
sep = "\\s")
View(matriz)
# Le metemos los nombres personalizados (que signifiquen algo para nosotros)
names(matriz) <- c("Entidad",
"Nueva",
"Existente",
"No Hipotecarios",
"Total",
"Infonavit",
"Entidades Financieras",
"No-hipotecarias",
"Total")
# Convertimos las columnas a numero
matriz[,2:9] <- lapply(matriz[,2:9], function(x){
x %>%
str_remove_all(pattern = ",") %>% # Le quitamos las comas
as.numeric() # Lo convertimos a numero
})
# Generamos la base de datos a graficar
bd_plot <- matriz %>%
select(Entidad,Nueva) %>%
filter(Entidad != "Nacional") %>%
mutate(Pctje = 100*Nueva/sum(Nueva)) %>%
arrange(-Pctje)
View(matriz)
# Le metemos los nombres personalizados (que signifiquen algo para nosotros)
names(matriz) <- c("Entidad",
"Nueva",
"Existente",
"No Hipotecarios",
"Total",
"Infonavit",
"Entidades Financieras",
"No-hipotecarias",
"Total (Derrama de Crédito)")
# Convertimos las columnas a numero
matriz[,2:9] <- lapply(matriz[,2:9], function(x){
x %>%
str_remove_all(pattern = ",") %>% # Le quitamos las comas
as.numeric() # Lo convertimos a numero
})
# Generamos la base de datos a graficar
bd_plot <- matriz %>%
select(Entidad,Nueva) %>%
filter(Entidad != "Nacional") %>%
mutate(Pctje = 100*Nueva/sum(Nueva)) %>%
arrange(-Pctje)
# Hacemos la gráfica
bd_plot %>%
ggplot(aes(x = reorder(Entidad, Pctje), y = Pctje)) +
geom_col(fill = "orange") +
coord_flip() +
geom_label(aes(label = paste0(round(Pctje,1), "%")),
hjust = -0.05) +
scale_y_continuous(expand = expansion(c(0,0.3), 0)) +
labs(y = "", x = "",
title = "Porcentaje del total de Créditos para adquisición de vivienda nueva\npor Entidad Federativa, 2021",
caption = "Fuente: Plan Estratégico y Financiero 2021-2025. INFONAVIT. ") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_blank())
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
blogdown:::serve_site()
